name: Deploy app to server
on:
  push:
    branches: [ "deployment" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    # Create tar of the current directory
    - name: Create deployment package
      run: tar -czf deploy.tar.gz .

    # Copy files to server and prepare for deployment
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Create deployment directory if it doesn't exist
          mkdir -p ~/app
          cd ~/app
          
          # Clean old deployment
          rm -rf *

    # The scp command to transfer files
    - name: Copy deployment package
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "deploy.tar.gz"
        target: "~/app"

    # Build and run on server
    - name: Build and run
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e  # Stop script on any error
          cd ~/app
          
          # Extract the deployment package
          tar -xzf deploy.tar.gz
          rm deploy.tar.gz
          
          # Build Docker image
          docker build -t my-app:latest .
          
          # Stop and remove existing container
          docker stop my-app-container || true
          docker rm my-app-container || true
          
          # Run new container
          docker run -d --name my-app-container \
            -p 3000:3000 \  # Adjust port as needed
            my-app:latest
            
          # Cleanup old images
          docker image prune -f
